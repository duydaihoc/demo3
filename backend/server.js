const express = require('express');
const dotenv = require('dotenv');
const connectDB = require('./database/connect');
const mongoose = require('mongoose'); // Import mongoose
const User = require('./models/User');
const Expense = require('./models/Expense');
const Category = require('./models/Category');
const Income = require('./models/Income');
const Wallet = require('./models/Wallet'); // Import Wallet model
const Transaction = require('./models/Transaction'); // Import Transaction model
const SavingsGoal = require('./models/SavingsGoal'); // Import SavingsGoal model
const cors = require('cors'); // Add CORS package
const authRoutes = require('./routes/auth'); // Add auth routes import
const adminRoutes = require('./routes/admin'); // Import admin routes
const walletRoutes = require('./routes/wallet'); // Import wallet routes
const transactionRoutes = require('./routes/transactions'); // Import transaction routes
const categoryRoutes = require('./routes/Category'); // Import category routes
const savingsRoutes = require('./routes/SavingsGoal'); // Import savings goal routes
const groupRoutes = require('./routes/groups'); // Import group routes
const notificationRoutes = require('./routes/notifications'); // Import notification routes

dotenv.config();

const app = express();

// Enable CORS for all origins (adjust for production security)
app.use(cors());

// Parse JSON request bodies
app.use(express.json());

// Ki·ªÉm tra n·∫øu MONGO_URI kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh
if (!process.env.MONGO_URI) {
  console.error('Error: MONGO_URI is not defined in .env file');
  process.exit(1); // Tho√°t n·∫øu thi·∫øu c·∫•u h√¨nh
}

// Connect to MongoDB
connectDB()
  .then(async () => {
    console.log('MongoDB connected successfully');
    
    // T·ª± ƒë·ªông t·∫°o c√°c danh m·ª•c m·∫∑c ƒë·ªãnh khi server kh·ªüi ƒë·ªông
    try {
      // Ki·ªÉm tra xem ƒë√£ c√≥ danh m·ª•c n√†o ch∆∞a
      const categoriesCount = await Category.countDocuments();
      console.log(`ƒê√£ c√≥ ${categoriesCount} danh m·ª•c trong c∆° s·ªü d·ªØ li·ªáu`);
      
      if (categoriesCount < 20) {
        console.log('Ti·∫øp t·ª•c t·∫°o th√™m danh m·ª•c c√≤n thi·∫øu...');
        
        // L·∫•y c√°c danh m·ª•c hi·ªán c√≥
        const existingCategories = await Category.find({}, 'name type');
        const existingNames = existingCategories.map(cat => `${cat.name}-${cat.type}`);
        
        // Danh s√°ch t·∫•t c·∫£ danh m·ª•c m·∫∑c ƒë·ªãnh
        const allDefaultCategories = [
          { name: 'ƒÇn u·ªëng', description: 'C√°c chi ph√≠ ƒÉn u·ªëng h√†ng ng√†y', type: 'expense', icon: 'üçî', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Di chuy·ªÉn', description: 'XƒÉng xe, taxi, xe bu√Ωt', type: 'expense', icon: 'üöó', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'H√≥a ƒë∆°n & Ti·ªán √≠ch', description: 'ƒêi·ªán, n∆∞·ªõc, internet', type: 'expense', icon: 'üìù', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Mua s·∫Øm', description: 'Qu·∫ßn √°o, ƒë·ªì d√πng', type: 'expense', icon: 'üõçÔ∏è', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Gi·∫£i tr√≠', description: 'Phim ·∫£nh, √¢m nh·∫°c, ch∆°i game', type: 'expense', icon: 'üéÆ', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Y t·∫ø', description: 'Thu·ªëc men, kh√°m b·ªánh', type: 'expense', icon: 'üíä', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Gi√°o d·ª•c', description: 'S√°ch v·ªü, h·ªçc ph√≠', type: 'expense', icon: 'üìö', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Nh√† c·ª≠a', description: 'Thu√™ nh√†, s·ª≠a ch·ªØa', type: 'expense', icon: 'üè†', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Th√∫ c∆∞ng', description: 'Th·ª©c ƒÉn, chƒÉm s√≥c th√∫ c∆∞ng', type: 'expense', icon: 'üê±', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Qu√† t·∫∑ng (Chi)', description: 'Qu√† t·∫∑ng cho ng∆∞·ªùi kh√°c', type: 'expense', icon: 'üéÅ', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'L∆∞∆°ng', description: 'Thu nh·∫≠p t·ª´ c√¥ng vi·ªác ch√≠nh', type: 'income', icon: 'üí∞', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Th∆∞·ªüng', description: 'Ti·ªÅn th∆∞·ªüng, hoa h·ªìng', type: 'income', icon: 'üèÜ', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'ƒê·∫ßu t∆∞', description: 'L·ª£i nhu·∫≠n t·ª´ ƒë·∫ßu t∆∞', type: 'income', icon: 'üìà', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'B√°n ƒë·ªì', description: 'Thu t·ª´ b√°n ƒë·ªì c≈©', type: 'income', icon: 'üè∑Ô∏è', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Ti·ªÅn ƒë∆∞·ª£c t·∫∑ng', description: 'Ti·ªÅn ƒë∆∞·ª£c ng∆∞·ªùi kh√°c t·∫∑ng', type: 'income', icon: 'üéÅ', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Tr·ª£ c·∫•p', description: 'Ti·ªÅn tr·ª£ c·∫•p, ph·ª• c·∫•p', type: 'income', icon: 'üìã', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'L√£i su·∫•t', description: 'L√£i t·ª´ ng√¢n h√†ng', type: 'income', icon: 'üè¶', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Freelance', description: 'Thu t·ª´ c√¥ng vi·ªác t·ª± do', type: 'income', icon: 'üíª', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Cho thu√™', description: 'Thu t·ª´ cho thu√™ t√†i s·∫£n', type: 'income', icon: 'üîë', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' },
          { name: 'Thu nh·∫≠p kh√°c', description: 'C√°c ngu·ªìn thu kh√°c', type: 'income', icon: 'üíµ', owner: null, createdBy: 'system', creatorName: 'H·ªá th·ªëng' }
        ];
        
        // L·ªçc ra c√°c danh m·ª•c ch∆∞a t·ªìn t·∫°i
        const categoriesToCreate = allDefaultCategories.filter(cat => 
          !existingNames.includes(`${cat.name}-${cat.type}`)
        );
        
        console.log(`C·∫ßn t·∫°o th√™m ${categoriesToCreate.length} danh m·ª•c`);
        
        if (categoriesToCreate.length > 0) {
          await Category.insertMany(categoriesToCreate);
          console.log('ƒê√£ t·∫°o b·ªï sung c√°c danh m·ª•c h·ªá th·ªëng c√≤n thi·∫øu');
          
          // ƒê·∫øm l·∫°i ƒë·ªÉ x√°c nh·∫≠n
          const updatedCount = await Category.countDocuments();
          console.log(`Hi·ªán t·∫°i c√≥ ${updatedCount} danh m·ª•c trong c∆° s·ªü d·ªØ li·ªáu`);
        }
      }
    } catch (error) {
      console.error('L·ªói khi t·∫°o danh m·ª•c m·∫∑c ƒë·ªãnh:', error.message);
    }
  })
  .catch((err) => {
    console.error('MongoDB connection failed:', err.message);
    process.exit(1); // Exit the process with failure
  });

// Middleware ki·ªÉm tra k·∫øt n·ªëi MongoDB
app.use((req, res, next) => {
  if (mongoose.connection.readyState !== 1) {
    return res.status(500).json({ message: 'MongoDB is not connected' });
  }
  next();
});

app.get('/', (req, res) => {
  res.send('API is running...');
});

// T·∫°o schema v√† model t·∫°m th·ªùi
const sampleSchema = new mongoose.Schema({ name: String });
const Sample = mongoose.model('Sample', sampleSchema);

// Route ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u
app.get('/create-sample', async (req, res) => {
  try {
    const sample = new Sample({ name: 'Sample Data' });
    await sample.save();
    res.status(201).json({ message: 'Sample data created successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Failed to create sample data', error: error.message });
  }
});

// Route ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho t·∫•t c·∫£ c√°c b·∫£ng
app.get('/create-sample-data', async (req, res) => {
  try {
    // T·∫°o d·ªØ li·ªáu m·∫´u cho User
    const user = new User({ name: 'John Doe', email: 'john@example.com', password: '123456' });
    await user.save();

    // T·∫°o d·ªØ li·ªáu m·∫´u cho Category
    const category = new Category({ name: 'Food', description: 'Food-related expenses' });
    await category.save();

    // T·∫°o d·ªØ li·ªáu m·∫´u cho Wallet
    const wallet = new Wallet({
      name: 'V√≠ ch√≠nh',
      currency: 'VND',
      initialBalance: 1000000,
      owner: user._id
    });
    await wallet.save();

    // T·∫°o d·ªØ li·ªáu m·∫´u cho Expense
    const expense = new Expense({
      user: user._id,
      title: 'Lunch',
      amount: 15,
      category: category.name,
    });
    await expense.save();

    // T·∫°o d·ªØ li·ªáu m·∫´u cho Income
    const income = new Income({
      user: user._id,
      source: 'Salary',
      amount: 1000,
    });
    await income.save();

    // T·∫°o transaction m·∫´u (li√™n k·∫øt t·ªõi wallet v√† category v·ª´a t·∫°o)
    try {
      const transaction = new Transaction({
        wallet: wallet._id,
        category: category._id,
        type: 'expense',
        amount: 150000,
        title: 'Chi ti√™u m·∫´u',
        description: 'Giao d·ªãch m·∫´u ƒë·ªÉ ki·ªÉm tra',
        date: new Date(),
        createdBy: user._id
      });
      await transaction.save();
    } catch (txErr) {
      console.warn('Kh√¥ng th·ªÉ t·∫°o transaction m·∫´u:', txErr.message);
    }
    
    // Create sample SavingsGoal linked to user and wallet (if possible)
    try {
      const goal = new SavingsGoal({
        name: 'Qu·ªπ ngh·ªâ d∆∞·ª°ng',
        targetAmount: 5000000,
        currentAmount: 1000000,
        owner: user._id,
        walletId: wallet._id,
        contributions: [{ amount: 1000000, walletId: wallet._id, note: 'Kh·ªüi t·∫°o' }]
      });
      await goal.save();
      console.log('Created sample savings goal');
    } catch (sgErr) {
      console.warn('Kh√¥ng th·ªÉ t·∫°o savings goal m·∫´u:', sgErr.message);
    }

    res.status(201).json({ message: 'Sample data created successfully' });
  } catch (error) {
    res.status(500).json({ message: 'Failed to create sample data', error: error.message });
  }
});

// Mount auth routes
app.use('/api/auth', authRoutes);
// Mount admin routes
app.use('/api/admin', adminRoutes);
// Mount wallet routes
app.use('/api/wallets', walletRoutes);
// Mount transaction routes
app.use('/api/transactions', transactionRoutes);
// Mount category routes
app.use('/api/categories', categoryRoutes);
// Mount savings goal routes
app.use('/api/savings', savingsRoutes);
// Mount group routes
app.use('/api/groups', groupRoutes);
// Mount notification routes
app.use('/api/notifications', notificationRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));